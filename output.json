[
  {
    "server": {
      "mcpId": "github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
      "githubUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
      "name": "SQLite",
      "author": "modelcontextprotocol",
      "description": "Provides database interaction and business intelligence capabilities through SQLite, enabling SQL queries, data analysis, and automated business insight generation.",
      "codiconIcon": "database",
      "logoUrl": "https://storage.googleapis.com/cline_public_images/sqlite.png",
      "category": "databases",
      "tags": [
        "sql",
        "data-analysis",
        "business-intelligence",
        "database-management",
        "sqlite"
      ],
      "requiresApiKey": false,
      "isRecommended": true,
      "githubStars": 12113,
      "downloadCount": 1717,
      "createdAt": "2025-02-18T05:45:28.005191Z",
      "updatedAt": "2025-02-18T05:45:28.005191Z",
      "readme": "# SQLite MCP Server\n\n## Overview\nA Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through SQLite. This server enables running SQL queries, analyzing business data, and automatically generating business insight memos.\n\n## Components\n\n### Resources\nThe server exposes a single dynamic resource:\n- `memo://insights`: A continuously updated business insights memo that aggregates discovered insights during analysis\n  - Auto-updates as new insights are discovered via the append-insight tool\n\n### Prompts\nThe server provides a demonstration prompt:\n- `mcp-demo`: Interactive prompt that guides users through database operations\n  - Required argument: `topic` - The business domain to analyze\n  - Generates appropriate database schemas and sample data\n  - Guides users through analysis and insight generation\n  - Integrates with the business insights memo\n\n### Tools\nThe server offers six core tools:\n\n#### Query Tools\n- `read_query`\n   - Execute SELECT queries to read data from the database\n   - Input:\n     - `query` (string): The SELECT SQL query to execute\n   - Returns: Query results as array of objects\n\n- `write_query`\n   - Execute INSERT, UPDATE, or DELETE queries\n   - Input:\n     - `query` (string): The SQL modification query\n   - Returns: `{ affected_rows: number }`\n\n- `create_table`\n   - Create new tables in the database\n   - Input:\n     - `query` (string): CREATE TABLE SQL statement\n   - Returns: Confirmation of table creation\n\n#### Schema Tools\n- `list_tables`\n   - Get a list of all tables in the database\n   - No input required\n   - Returns: Array of table names\n\n- `describe-table`\n   - View schema information for a specific table\n   - Input:\n     - `table_name` (string): Name of table to describe\n   - Returns: Array of column definitions with names and types\n\n#### Analysis Tools\n- `append_insight`\n   - Add new business insights to the memo resource\n   - Input:\n     - `insight` (string): Business insight discovered from data analysis\n   - Returns: Confirmation of insight addition\n   - Triggers update of memo://insights resource\n\n\n## Usage with Claude Desktop\n\n### uv\n\n```bash\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"parent_of_servers_repo/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"~/test.db\"\n    ]\n  }\n}\n```\n\n### Docker\n\n```json\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-i\",\n      \"-v\",\n      \"mcp-test:/mcp\",\n      \"mcp/sqlite\",\n      \"--db-path\",\n      \"/mcp/test.db\"\n    ]\n  }\n}\n```\n\n## Building\n\nDocker:\n\n```bash\ndocker build -t mcp/sqlite .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n"
    },
    "messages": [
      {
        "role": "user",
        "content": "Using the mcp-server-sqlite, execute the SQL query 'SELECT * FROM users' on the database at /Users/andy/repos/cursor-tools-worktree/main/tests/feature-behaviors/mcp/mcp-command/test.db and save the results to output.json in JSON format"
      },
      {
        "role": "assistant",
        "content": "I'll help you execute the SQL query 'SELECT * FROM users' and save the results to output.json in JSON format. Let me first check what tables are available in the database to confirm the users table exists."
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "tool_use",
            "id": "toolu_9j18qhzup3bvqr7hobmtcl",
            "name": "list_tables",
            "input": {}
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "tool_result",
            "tool_use_id": "toolu_9j18qhzup3bvqr7hobmtcl",
            "content": "[\"[{'name': 'users'}, {'name': 'categories'}, {'name': 'products'}]\"]"
          }
        ]
      },
      {
        "role": "assistant",
        "content": "Great! I can see that the database has a 'users' table as expected, along with 'categories' and 'products' tables. Now, let's examine the schema of the users table to understand its structure."
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "tool_use",
            "id": "toolu_9lhedrycrypd48whp6gq2p",
            "name": "describe_table",
            "input": {
              "table_name": "users"
            }
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "tool_result",
            "tool_use_id": "toolu_9lhedrycrypd48whp6gq2p",
            "content": "[\"[{'cid': 0, 'name': 'id', 'type': 'INTEGER', 'notnull': 0, 'dflt_value': None, 'pk': 1}, {'cid': 1, 'name': 'name', 'type': 'TEXT', 'notnull': 0, 'dflt_value': None, 'pk': 0}, {'cid': 2, 'name': 'email', 'type': 'TEXT', 'notnull': 0, 'dflt_value': None, 'pk': 0}]\"]"
          }
        ]
      },
      {
        "role": "assistant",
        "content": "Now I understand the structure of the users table. It has three columns:\n1. id (INTEGER, primary key)\n2. name (TEXT)\n3. email (TEXT)\n\nLet's execute the SQL query to fetch all users:"
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "tool_use",
            "id": "toolu_5qsfpjhiquccezuf72unj",
            "name": "read_query",
            "input": {
              "query": "SELECT * FROM users"
            }
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "tool_result",
            "tool_use_id": "toolu_5qsfpjhiquccezuf72unj",
            "content": "[\"[{'id': 1, 'name': 'Alice', 'email': 'alice@example.com'}, {'id': 2, 'name': 'Bob', 'email': 'bob@example.com'}, {'id': 3, 'name': 'Charlie', 'email': 'charlie@example.com'}]\"]"
          }
        ]
      },
      {
        "role": "assistant",
        "content": "I've successfully executed the SQL query 'SELECT * FROM users' on the database. The results show that there are three users in the database:\n\n1. Alice (ID: 1, email: alice@example.com)\n2. Bob (ID: 2, email: bob@example.com)\n3. Charlie (ID: 3, email: charlie@example.com)\n\nThe query results have been retrieved and would be saved to output.json in JSON format as specified in your command:\n```json\n[\n  {\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"},\n  {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"},\n  {\"id\": 3, \"name\": \"Charlie\", \"email\": \"charlie@example.com\"}\n]\n```\n\nSince this is running through the mcp-server-sqlite interface, the actual saving to output.json would be handled by your \"mcp run\" command that you're executing, as indicated in your npm_lifecycle_script environmental variable."
      }
    ],
    "error": null
  }
]Output saved to output.json

=== Results from SQLite ===
Using the mcp-server-sqlite, execute the SQL query 'SELECT * FROM users' on the database at /Users/andy/repos/cursor-tools-worktree/main/tests/feature-behaviors/mcp/mcp-command/test.db and save the results to output.json in JSON format
I'll help you execute the SQL query 'SELECT * FROM users' and save the results to output.json in JSON format. Let me first check what tables are available in the database to confirm the users table exists.
Great! I can see that the database has a 'users' table as expected, along with 'categories' and 'products' tables. Now, let's examine the schema of the users table to understand its structure.
Now I understand the structure of the users table. It has three columns:
1. id (INTEGER, primary key)
2. name (TEXT)
3. email (TEXT)

Let's execute the SQL query to fetch all users:
I've successfully executed the SQL query 'SELECT * FROM users' on the database. The results show that there are three users in the database:

1. Alice (ID: 1, email: alice@example.com)
2. Bob (ID: 2, email: bob@example.com)
3. Charlie (ID: 3, email: charlie@example.com)

The query results have been retrieved and would be saved to output.json in JSON format as specified in your command:
```json
[
  {"id": 1, "name": "Alice", "email": "alice@example.com"},
  {"id": 2, "name": "Bob", "email": "bob@example.com"},
  {"id": 3, "name": "Charlie", "email": "charlie@example.com"}
]
```

Since this is running through the mcp-server-sqlite interface, the actual saving to output.json would be handled by your "mcp run" command that you're executing, as indicated in your npm_lifecycle_script environmental variable.

=== End of SQLite ===
